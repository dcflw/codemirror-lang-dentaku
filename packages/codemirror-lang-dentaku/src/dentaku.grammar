@precedence {
  call,
  prefix,
  postfix @left,
  bitwise @left
  power @left
  times @left,
  plus @left,
  rel @left,

  statement @cut
}

@top Program { expression? }

commaSep<content> {
  (content ("," content)*)?
}

literal[@isGroup=Literal] {
  Number |
  String |
  @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> |
  ArrayExpression { "[" commaSep<expression> "]" } | 
  Duration {"duration" "(" Number "," Duration ")"} |
  Date
}

expression[@isGroup=Expression] {
  literal |
  VariableName |
  UnaryExpression |
  ParenthesizedExpression |
  BinaryExpression |

  CallExpression {
    FunctionName !call ArgList
  }
}

VariableName { identifier }

FunctionName { identifier }

ParenthesizedExpression { "(" expression ")" }

ArgList { "(" commaSep<expression> ")" }

UnaryExpression {
  !prefix ArithOp<"+" | "-"> expression |
  expression !postfix PercentOp
}

BinaryExpression {
  expression !bitwise BitwiseOp expression |
  expression !power (ArithOp<"^">) expression |
  expression !times (ArithOp<"/" | "*"> | PercentOp) expression |
  expression !plus ArithOp<"+" | "-"> expression |
  expression !rel CompareOp expression
}

@skip { space }

@tokens {
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  identifier { identifierChar (identifierChar | @digit)* }

  Number { @digit+ ("." @digit+)? }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  Duration { "day" | "days" | "week" | "weeks" | "month" | "months" | "year" | "years" }

  Day { @digit | "0" @digit | "1" @digit | "2" @digit | "30" | "31" }

  Month { @digit | "0" @digit | "10" | "11" | "12" }

  Date { Day "-" Month "-" @digit @digit @digit @digit }

  ArithOp<expr> { expr }

  BitwiseOp { "|" | "&" | "<<" | ">>" }

  PercentOp { "%" }

  CompareOp { (("<" | ">" | "=") "="? ) | "!=" | "<>"  }

  space { $[ \t\n\r]+ }

  @precedence {
    "duration",
    identifier,
    Date,
    Number
  }

  "(" ")" "[" "]"
}

@detectDelim
